name: Build

on:
  workflow_call:
    inputs:
      branch:
        required: true
        default: 'master'

jobs:
  apple-darwin-aarch64:
    name: apple darwin aarch64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'samsung/netcoredbg'
          ref: ${{ inputs.branch }} 
      - name: Build
        run: |
          ls
          mkdir build
          cd build
          CC=clang CXX=clang++ cmake .. -DDOTNET_DIR=/Users/runner/.dotnet
          make
          file src/netcoredbg
      - uses: actions/upload-artifact@v4
        with:
          name: netcoredbg-macos-arm64
          path: |
            build/src/netcoredbg
            build/src/libdbgshim.dylib
            build/src/ManagedPart.dll
            build/src/Microsoft.CodeAnalysis.CSharp.Scripting.dll
            build/src/Microsoft.CodeAnalysis.CSharp.dll
            build/src/Microsoft.CodeAnalysis.Scripting.dll
            build/src/Microsoft.CodeAnalysis.dll



create_release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      # 1) artifact (deploy win-x86_64)
      - uses: actions/download-artifact@v4
        with:
          name: deploy win-x86_64 (msvc)
          path: './deploy win-x86_64 (msvc)'
      - run: |
          rm -rf 'deploy-win-x86_64.zip'
          zip -j -r 'deploy-win-x86_64.zip' './deploy win-x86_64 (msvc)'
      # 2) artifact (deploy macos-aarch64)
      - uses: actions/download-artifact@v4
        with:
          name: deploy macos-aarch64
          path: './deploy.app'
      - run: |
          rm -rf 'deploy-macos-aarch64.zip'
          zip -j -r 'deploy-macos-aarch64.zip' './deploy.app'
      # 3) artifact (deploy linux-x86_64)
      - uses: actions/download-artifact@v4
        with:
          name: deploy linux-x86_64 (glibc)
          path: './deploy linux-x86_64 glibc'
      - run: |
          rm -rf 'deploy-linux-x86_64-glibc.zip'
          zip -j -r 'deploy-linux-x86_64-glibc.zip' './deploy linux-x86_64 glibc'
      # 4) artifact (deploy linux-aarch64)
      - uses: actions/download-artifact@v4
        with:
          name: deploy linux-aarch64 (glibc)
          path: './deploy linux-aarch64 glibc'
      - run: |
          rm -rf 'deploy-linux-aarch64-glibc.zip'
          zip -j -r 'deploy-linux-aarch64-glibc.zip' './deploy linux-aarch64 glibc'
      # 5) artifact (deploy linux-riscv64)
      - uses: actions/download-artifact@v4
        with:
          name: deploy linux-riscv64 (glibc)
          path: './deploy linux-riscv64 glibc'
      - run: |
          rm -rf 'deploy-linux-riscv64-glibc.zip'
          zip -j -r 'deploy-linux-riscv64-glibc.zip' './deploy linux-riscv64 glibc'
      # upload release
      - uses: ncipollo/release-action@v1
        with:
          commit: 'master'
          tag: 'v${{ inputs.tag }}'
          allowUpdates: true
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
          draft: '${{ inputs.draft }}'
          name: 'deploy.rs ${{ inputs.tag }}'
          removeArtifacts: true
          artifacts: '*.zip'